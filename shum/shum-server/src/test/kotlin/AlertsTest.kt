@file:Suppress("SpellCheckingInspection")

import data.EXPECTED_NU_I_DNIPRO
import kotlinx.serialization.json.Json
import logic.filterAlert
import model.Entity
import model.TelegramChannelHistory
import kotlin.test.Test
import kotlin.test.assertEquals

class AlertsTest {

    private val json = Json {
        prettyPrint = true
        ignoreUnknownKeys = true
    }
    private val dniproAlertsData = readTextResource("ChatExport_2024-09-22_dnipro_alerts/result.json")
    private val dniproAlertsParsed = json.decodeFromString(TelegramChannelHistory.serializer(), dniproAlertsData)
    private val dniproAlertsMessages = dniproAlertsParsed.messages
    private val nuIDniproData = readTextResource("ChatExport_2024-09-22_nu_i_dnipro/result.json")
    private val nuIDniproParsed = json.decodeFromString(TelegramChannelHistory.serializer(), nuIDniproData)
    private val nuIDniproMessages = nuIDniproParsed.messages
    private val vanekNikolaevData = readTextResource("ChatExport_2024-09-22_vanek_nikolaev/result.json")
    private val vanekNikolaevParsed = json.decodeFromString(TelegramChannelHistory.serializer(), vanekNikolaevData)
    private val vanekNikolaevMessages = vanekNikolaevParsed.messages

    @Test
    fun testSerilization() {
        val testMessage = dniproAlertsMessages.first {
            it.id == 16593
        }
//        println(dniproAlertsParsed)
//        println(dniproAlertsData.indexOf("16593").let {
//            dniproAlertsData.substring(it, min(it + 2000, dniproAlertsData.length))
//        })
        assertEquals(
            "–í–ø–∞–≤ —Å–æ–∫–∏—Ä–∫–æ—é. \\n–ú–∞—Ç—å —Å–∏—Ä–∞ –∑–µ–º–ª—è.\\n–ì–∞—Ä–Ω–æ–≥–æ —Ç–∏—Ö–æ–≥–æ –¥–Ω—è.\\n\\n\uD83E\uDD19 –î–Ω—ñ–ø—Ä–æ | ‚úå\uFE0F –ö–∏—ó–≤  |  \uD83E\uDD1D –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏",
            testMessage.toString()
        )
        println(testMessage)
    }

    @Test
    fun testDniproAlerts() {
        val filtered = dniproAlertsMessages.filter { filterAlert(it.toString(), Entity.Channel(dniproAlertsParsed.id)) }
//        filtered.forEach {
//            println(it)
//        }
        assertEquals(
            listOf(
                "–°–∏—Ç—É–∞—Ü—ñ—è –ø–æ —à–∞—Ö–µ–¥–∞–º:\\n–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å, –•–µ—Ä—Å–æ–Ω—Å—å–∫–∞, –ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞.\\n–í –º–µ–∂–∞—Ö –î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–æ—ó –Ω–µ —Ñ—ñ–∫—Å—É—é—Ç—å—Å—è.\\n\\nü§ô –î–Ω—ñ–ø—Ä–æ | ‚úåÔ∏è –ö–∏—ó–≤  |  ü§ù –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏",
                "–î–Ω—ñ–ø—Ä–æ –≤ —É–∫—Ä–∏—Ç—Ç—è\\n\\nü§ô –î–Ω—ñ–ø—Ä–æ | ‚úåÔ∏è –ö–∏—ó–≤  |  ü§ù –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏",
                "–û–∫–æ –°–∞—É—Ä–æ–Ω–∞ –≤ —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫—É –î–Ω—ñ–ø—Ä–æ/–ù–æ–≤–æ–º–æ—Å–∫–æ–≤—Å—å–∫/–°–∏–Ω–µ–ª—å–Ω–∏–∫–æ–≤–µ.\\n\\nü§ô –î–Ω—ñ–ø—Ä–æ | ‚úåÔ∏è –ö–∏—ó–≤  |  ü§ù –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏",
            ),
            filtered.map { it.toString() }
        )
    }

    @Test
    fun testNuIDnipro() {
        val filtered = nuIDniproMessages.filter { filterAlert(it.toString(), Entity.Channel(nuIDniproParsed.id)) }
//        filtered.forEach {
//            println(it)
//        }
        assertEquals(EXPECTED_NU_I_DNIPRO, filtered.map { it.toString() })
    }

    @Test
    fun testVanekNikolaev() {
        val filtered =
            vanekNikolaevMessages.filter { filterAlert(it.toString(), Entity.Channel(vanekNikolaevParsed.id)) }
//        filtered.forEach {
//            println(it)
//        }
        val expected =
            ("‚ùó\uFE0F–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—â–∏–Ω–∞. —Ä–æ—Å—ñ–π—Å—å–∫—ñ –≤—ñ–π—Å—å–∫–∞ –∑–¥—ñ–π—Å–Ω–∏–ª–∏ –∞—Ç–∞–∫—É –ø–æ –ü–∞–≤–ª–æ–≥—Ä–∞–¥—É. –ü–æ–ø–µ—Ä–µ–¥–Ω—å–æ, 1 –ª—é–¥–∏–Ω–∞ –∑–∞–≥–∏–Ω—É–ª–∞, —â–µ 30 ‚Äî –ø–æ—Å—Ç—Ä–∞–∂–¥–∞–ª–∏\\n\\n–ü–æ—à–∫–æ–¥–∂–µ–Ω–∏–π –ø‚Äô—è—Ç–∏–ø–æ–≤–µ—Ä—Ö–æ–≤–∏–π –∂–∏—Ç–ª–æ–≤–∏–π –±—É–¥–∏–Ω–æ–∫. –í–æ–≥–Ω–µ–±–æ—Ä—Ü—ñ –ª—ñ–∫–≤—ñ–¥—É–≤–∞–ª–∏ –ø–æ–∂–µ–∂—É —Ç–∞ –≤—Ä—è—Ç—É–≤–∞–ª–∏ 5 –ª—é–¥–µ–π.\\n\\n–ù–∞ –º—ñ—Å—Ü—ñ —É–¥–∞—Ä—É –ø—Ä–∞—Ü—é—é—Ç—å —É—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Å–ª—É–∂–±–∏.\\n\\n\uD83C\uDDFA\uD83C\uDDE6–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è | –ú—ñ–Ω—ñ—Å—Ç—Ä | –ú–í–° | –ì–≤–∞—Ä–¥—ñ—è –Ω–∞—Å—Ç—É–ø—É\n" +
                    "–µ—â—ë –æ–¥–Ω–∞ –±–∞–ª–ª–∏—Å—Ç–∏–∫–∞ –Ω–∞ –ü–∞–≤–ª–æ–≥—Ä–∞–¥, –≤ —ç—Ç–æ—Ç —Ä–∞–∑ —Å –¢–∞–≥–∞–Ω—Ä–æ–≥–∞").split("\n")
        assertEquals(
            expected,
            filtered.map { it.toString() }
        )
    }

}