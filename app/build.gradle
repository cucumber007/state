plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.6.10'
    id 'com.google.gms.google-services'
    id "io.sentry.android.gradle" version "3.12.0"
    id("com.google.firebase.crashlytics")
}

android {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    namespace 'com.spqrta.state'
    compileSdk 34

    defaultConfig {
        applicationId "com.spqrta.state"
        minSdk project_min_sdk.toInteger()
        targetSdk 34
        // 1000000 1000 1
        versionCode 7
        versionName "0.0.7"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }
    signingConfigs {
        release {
            storeFile file(getProperty(properties, 'keystorePath'))
            storePassword getProperty(properties, 'keystorePassword')
            keyAlias getProperty(properties, 'keyAlias')
            keyPassword getProperty(properties, 'keyPassword')
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
        coreLibraryDesugaringEnabled true
    }
    kotlinOptions {
        jvmTarget = project_jvm_target
    }
    lintOptions {
//        checkReleaseBuilds false
    }
    buildFeatures {
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.8'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    implementation project(':common')
    implementation project(':dynalist')

    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:${common_core_library_desugaring}"

    implementation(platform("com.google.firebase:firebase-bom:33.5.0"))
    implementation("com.google.firebase:firebase-crashlytics")
    implementation("com.google.firebase:firebase-analytics")

    implementation "androidx.core:core-ktx:1.13.1"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.8.4"
    implementation "androidx.activity:activity-compose:1.9.1"
    implementation "androidx.compose.ui:ui:$compose_ui_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_ui_version"
    implementation "androidx.compose.material:material:$compose_ui_version"
    implementation "androidx.compose.material3:material3:1.2.1"

    implementation "com.squareup.okhttp3:logging-interceptor:4.4.0"
    implementation "com.squareup.okhttp3:okhttp:4.9.3"
    implementation "com.squareup.retrofit2:retrofit:2.6.3"
    implementation "com.squareup.retrofit2:converter-moshi:2.4.0"
    implementation "com.squareup.retrofit2:converter-scalars:2.6.3"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.1"

    testImplementation "junit:junit:4.13.2"
    androidTestImplementation "androidx.test.ext:junit:1.1.5"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.5.1"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_ui_version"
}

tasks.register('releaseDesktop', Copy) {

    // Define the output directory (change this path to your actual Desktop path)
    def destPath = System.getProperty("user.home") + "/Desktop/"

    // Retrieve version name
    def versionName = android.defaultConfig.versionName

    // Define the APK's origin and output paths
    // def apkPath = "${buildDir}/outputs/apk/debug/"
    def apkPath = "${buildDir}/outputs/apk/release/"
    def apkName = "app-release.apk"
    def newApkName = "State_v${versionName}.apk"

    println("\nCopying: ${apkPath + apkName}")
    println("To: ${destPath + newApkName}\n")

    from(apkPath) {
        include apkName
        rename { newApkName }
    }
    into destPath
}

tasks.register('openDesktop', Exec) {
    commandLine "open", "${System.getProperty("user.home")}/Desktop/"
}

//noinspection ConfigurationAvoidance
tasks.getByName("releaseDesktop").dependsOn("assembleRelease").dependsOn("openDesktop")

static def getProperty(Properties properties, String key, String defaultValue = null) {
    def property = properties.getProperty(key)
    if (property != null) {
        return property
    } else {
        if (defaultValue == null) {
            throw new NullPointerException("property \"" + key + "\" not found")
        } else {
            return defaultValue
        }
    }
}
